{
  "$schema": "http://json-schema.org/draft-04/hyper-schema",
  "definitions": {
    "list_filter": {
      "type": "object",
      "properties": {
        "start_time": {
          "$ref": "#/definitions/start_time"
        },
        "end_time": {
          "$ref": "#/definitions/end_time"
        },
        "per_page": {
          "$ref": "#/definitions/per_page"
        },
        "page": {
          "$ref": "#/definitions/page"
        }
      }
    },
    "payment_list_filter": {
      "type": "object",
      "properties": {
        "start_time": {
          "$ref": "#/definitions/start_time"
        },
        "end_time": {
          "$ref": "#/definitions/end_time"
        },
        "per_page": {
          "$ref": "#/definitions/per_page"
        },
        "page": {
          "$ref": "#/definitions/page"
        },
        "currency": {
          "$ref": "#/definitions/payments/definitions/currency"
        },
        "external_order_num": {
          "$ref": "#/definitions/payments/definitions/external_order_num"
        },
        "status": {
          "$ref": "#/definitions/payments/definitions/status"
        }
      }
    },
    "start_time": {
      "type": "string",
      "format": "date-time",
      "description": "Query for records created after this time."
    },
    "end_time": {
      "type": "string",
      "format": "date-time",
      "description": "Query for records created before this time."
    },
    "page": {
      "type": "number",
      "minimum": 1,
      "description": "Page number to query for."
    },
    "per_page": {
      "type": "number",
      "minimum": 1,
      "description": "How many complete objects per page."
    },
    "list": {
      "type": "object",
      "properties": {
        "resource": {
          "enum": [
            "list"
          ]
        },
        "total": {
          "type": "integer"
        },
        "page": {
          "$ref": "#/definitions/page"
        },
        "per_page": {
          "$ref": "#/definitions/per_page"
        },
        "last_page": {
          "type": "integer"
        },
        "data": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/payments"
              }
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/events"
              }
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokens"
              }
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customers"
              }
            }
          ]
        }
      }
    },
    "events": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "type": "object",
      "definitions": {
        "id": {
          "example": "66a4824ac97cc7afff608f27c7",
          "readOnly": true,
          "type": "string",
          "description": "A unique identifier for an event."
        },
        "type": {
          "example": "payment.authorized",
          "readOnly": true,
          "type": "string"
        },
        "data": {
          "readOnly": true,
          "type": "object",
          "description": "An object which creates an event"
        },
        "resource": {
          "example": "event",
          "readOnly": true,
          "enum": [
            "event"
          ],
          "description": "Name of resource"
        },
        "created_at": {
          "example": "2015-03-06T06:52:35Z",
          "format": "date-time",
          "readOnly": true,
          "type": "string",
          "description": "An ISO 8601 formatted timestamp of when the event was created."
        }
      },
      "links": [
        {
          "title": "List",
          "description": "Lists out past webhook events from most-recent to least-recent.",
          "href": "/events",
          "method": "GET",
          "rel": "instances",
          "response_example": "events#index",
          "targetSchema": {
            "$ref": "#/definitions/list"
          },
          "schema": {
            "$ref": "#/definitions/list"
          }
        },
        {
          "title": "Show",
          "description": "View an event given an `id`. Event `id`s can be saved from a webhook or found by querying all events.",
          "href": "/events/{(%2Fdefinitions%2Fevents%2Fdefinitions%2Fid)}",
          "method": "GET",
          "rel": "self",
          "response_example": "events#show",
          "targetSchema": {
            "$ref": "#/definitions/events"
          }
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/events/definitions/id"
        },
        "type": {
          "$ref": "#/definitions/events/definitions/type"
        },
        "resource": {
          "$ref": "#/definitions/events/definitions/resource"
        },
        "data": {
          "$ref": "#/definitions/events/definitions/data"
        },
        "created_at": {
          "$ref": "#/definitions/events/definitions/created_at"
        }
      },
      "description": "Event Resource",
      "title": "Events"
    },
    "payments": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "type": "object",
      "definitions": {
        "capture": {
          "type": "boolean",
          "default": true,
          "description": "If false, the payment will be authorized but not be captured. This option is ignored if a payment type is not `credit_card`."
        },
        "nonempty_string": {
          "type": "string",
          "minLength": 1
        },
        "given_name": {
          "$ref": "#/definitions/payments/definitions/nonempty_string"
        },
        "family_name": {
          "$ref": "#/definitions/payments/definitions/nonempty_string"
        },
        "given_name_kana": {
          "$ref": "#/definitions/payments/definitions/nonempty_string"
        },
        "family_name_kana": {
          "$ref": "#/definitions/payments/definitions/nonempty_string"
        },
        "name": {
          "$ref": "#/definitions/payments/definitions/nonempty_string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 255
        },
        "return_url": {
          "type": "string",
          "format": "uri"
        },
        "cancel_url": {
          "type": "string",
          "format": "uri"
        },
        "locale": {
          "enum": [
            "en",
            "ja",
            "ko"
          ],
          "default": "ja",
          "description": "Sets language of instruction page for supported payment methods. Valid options are 'en', 'ja', and 'ko'."
        },
        "partner_origin": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "pattern": "\\A([() \\-_+]*[0-9]){10}[() \\-_+0-9]*\\Z"
        },
        "customer": {
          "type": "string",
          "description": "The ID of an existing customer in which to provide payment details for the payment. This or `payment_details` must be present."
        },
        "expiry_days": {
          "type": "integer",
          "minimum": 0,
          "maximum": 59,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false
        },
        "instructions_url": {
          "type": "string",
          "format": "uri"
        },
        "external_order_num": {
          "type": "string",
          "maxLength": 255,
          "description": "A unique ID from your application used to track this payment."
        },
        "bank_transfer_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "bank_transfer"
              ]
            },
            "phone": {
              "$ref": "#/definitions/payments/definitions/phone"
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "given_name": {
              "$ref": "#/definitions/payments/definitions/given_name"
            },
            "family_name": {
              "$ref": "#/definitions/payments/definitions/family_name"
            },
            "given_name_kana": {
              "$ref": "#/definitions/payments/definitions/given_name_kana"
            },
            "family_name_kana": {
              "$ref": "#/definitions/payments/definitions/family_name_kana"
            },
            "expiry_days": {
              "type": "integer",
              "minimum": 14,
              "maximum": 59,
              "exclusiveMinimum": false,
              "exclusiveMaximum": false
            }
          },
          "required": [
            "type",
            "given_name",
            "family_name",
            "given_name_kana",
            "family_name_kana",
            "phone",
            "email"
          ]
        },
        "bank_transfer_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "bank_transfer"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "order_id": {
              "type": "string"
            },
            "bank_name": {
              "type": "string"
            },
            "account_number": {
              "type": "string"
            },
            "account_type": {
              "type": "string"
            },
            "account_name": {
              "type": "string"
            },
            "instructions_url": {
              "$ref": "#/definitions/payments/definitions/instructions_url"
            }
          },
          "required": [
            "type",
            "email",
            "order_id",
            "bank_name",
            "account_number",
            "account_type",
            "account_name",
            "instructions_url"
          ]
        },
        "konbini_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "konbini"
              ]
            },
            "store": {
              "enum": [
                "seven-eleven",
                "lawson",
                "family-mart",
                "ministop",
                "daily-yamazaki",
                "seicomart"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "phone": {
              "$ref": "#/definitions/payments/definitions/phone"
            },
            "expiry_days": {
              "$ref": "#/definitions/payments/definitions/expiry_days"
            }
          },
          "required": [
            "type",
            "store",
            "email"
          ]
        },
        "konbini_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "konbini"
              ]
            },
            "store": {
              "enum": [
                "seven-eleven",
                "lawson",
                "family-mart",
                "ministop",
                "daily-yamazaki",
                "seicomart"
              ]
            },
            "instructions_url": {
              "$ref": "#/definitions/payments/definitions/instructions_url"
            },
            "confirmation_code": {
              "type": "string"
            },
            "receipt": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "store",
            "receipt",
            "instructions_url"
          ]
        },
        "pay_easy_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "pay_easy"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "given_name": {
              "$ref": "#/definitions/payments/definitions/given_name"
            },
            "family_name": {
              "$ref": "#/definitions/payments/definitions/family_name"
            },
            "given_name_kana": {
              "$ref": "#/definitions/payments/definitions/given_name_kana"
            },
            "family_name_kana": {
              "$ref": "#/definitions/payments/definitions/family_name_kana"
            },
            "phone": {
              "$ref": "#/definitions/payments/definitions/phone"
            },
            "expiry_days": {
              "$ref": "#/definitions/payments/definitions/expiry_days"
            }
          },
          "required": [
            "type",
            "given_name",
            "family_name",
            "given_name_kana",
            "family_name_kana",
            "email",
            "phone"
          ]
        },
        "pay_easy_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "pay_easy"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "bank_id": {
              "type": "string"
            },
            "customer_id": {
              "type": "string"
            },
            "confirmation_id": {
              "type": "string"
            },
            "instructions_url": {
              "$ref": "#/definitions/payments/definitions/instructions_url"
            }
          },
          "required": [
            "type",
            "bank_id",
            "customer_id",
            "confirmation_id",
            "instructions_url"
          ]
        },
        "web_money_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "web_money"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "prepaid_number": {
              "type": "string",
              "maxLength": 16,
              "minLength": 16
            }
          },
          "required": [
            "type",
            "prepaid_number"
          ]
        },
        "web_money_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "web_money"
              ]
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "short_amount": {
              "type": "integer"
            },
            "prepaid_cards": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "last_four_digits": {
                    "type": "string"
                  },
                  "points": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "steam_prepaid_card_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "steam_prepaid_card"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "prepaid_number": {
              "type": "string",
              "maxLength": 16,
              "minLength": 16
            }
          },
          "required": [
            "type",
            "prepaid_number"
          ]
        },
        "steam_prepaid_card_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "steam_prepaid_card"
              ]
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "short_amount": {
              "type": "integer"
            },
            "prepaid_cards": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "last_four_digits": {
                    "type": "string"
                  },
                  "points": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "bit_cash_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "bit_cash"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "prepaid_number": {
              "type": "string",
              "maxLength": 16,
              "minLength": 16
            }
          },
          "required": [
            "type",
            "prepaid_number"
          ]
        },
        "bit_cash_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "bit_cash"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "nanaco_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "nanaco"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "prepaid_number": {
              "type": "string",
              "maxLength": 16,
              "minLength": 16
            }
          },
          "required": [
            "type",
            "prepaid_number"
          ]
        },
        "nanaco_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "nanaco"
              ]
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "short_amount": {
              "type": "integer"
            },
            "prepaid_cards": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "last_four_digits": {
                    "type": "string"
                  },
                  "points": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "net_cash_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "net_cash"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "prepaid_number": {
              "type": "string",
              "maxLength": 20,
              "minLength": 16
            }
          },
          "required": [
            "type",
            "prepaid_number"
          ]
        },
        "net_cash_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "net_cash"
              ]
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "short_amount": {
              "type": "integer"
            },
            "prepaid_cards": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "last_four_digits": {
                    "type": "string"
                  },
                  "points": {
                    "type": "number"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        "culture_voucher_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "culture_voucher"
              ]
            },
            "culture_id": {
              "type": "string",
              "maxLength": 12,
              "minLength": 1
            },
            "culture_password": {
              "type": "string",
              "maxLength": 12,
              "minLength": 1
            }
          },
          "required": [
            "type",
            "culture_id",
            "culture_password"
          ]
        },
        "culture_voucher_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "culture_voucher"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "happy_money_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "happy_money"
              ]
            },
            "happy_money_id": {
              "type": "string",
              "maxLength": 20,
              "minLength": 1
            },
            "happy_money_password": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1
            }
          },
          "required": [
            "type",
            "happy_money_id",
            "happy_money_password"
          ]
        },
        "happy_money_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "happy_money"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "mobile_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "mobile"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            }
          },
          "required": [
            "type",
            "email"
          ]
        },
        "mobile_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "mobile"
              ]
            },
            "redirect_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "type",
            "redirect_url"
          ]
        },
        "toss_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "toss"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            }
          },
          "required": [
            "type",
            "email"
          ]
        },
        "toss_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "toss"
              ]
            },
            "redirect_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "type",
            "redirect_url"
          ]
        },
        "zgold_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "zgold"
              ]
            },
            "item_title": {
              "type": "string"
            },
            "item_description": {
              "type": "string"
            },
            "image_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "type"
          ]
        },
        "zgold_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "zgold"
              ]
            },
            "redirect_url": {
              "type": "string",
              "format": "uri"
            }
          },
          "required": [
            "type",
            "redirect_url"
          ]
        },
        "dospara_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "dospara"
              ]
            },
            "user_no": {
              "type": "string",
              "maxLength": 20
            },
            "user_password": {
              "type": "string",
              "maxLength": 20
            }
          },
          "required": [
            "type",
            "user_no",
            "user_password"
          ]
        },
        "dospara_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "dospara"
              ]
            }
          },
          "required": [
            "type"
          ]
        },
        "cvs_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "cvs"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            }
          },
          "required": [
            "type",
            "email"
          ]
        },
        "cvs_korea_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "cvs"
              ]
            }
          },
          "required": [
            "type",
            "email"
          ]
        },
        "credit_card_request": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "credit_card"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            },
            "number": {
              "type": "string",
              "maxLength": 19
            },
            "month": {
              "type": "integer",
              "maximum": 12,
              "minimum": 1
            },
            "year": {
              "type": "integer",
              "maximum": 2100,
              "minimum": 1
            },
            "verification_value": {
              "type": "string"
            },
            "given_name": {
              "$ref": "#/definitions/payments/definitions/given_name"
            },
            "family_name": {
              "$ref": "#/definitions/payments/definitions/family_name"
            },
            "name": {
              "$ref": "#/definitions/payments/definitions/family_name"
            },
            "three_d_secure": {
              "type": "boolean",
              "default": false
            },
            "expiry_days": {
              "$ref": "#/definitions/payments/definitions/expiry_days"
            }
          },
          "required": [
            "type",
            "number",
            "month",
            "year"
          ],
          "anyOf": [
            {
              "required": [
                "given_name",
                "family_name"
              ]
            },
            {
              "required": [
                "name"
              ]
            }
          ]
        },
        "credit_card_response": {
          "type": "object",
          "properties": {
            "type": {
              "enum": [
                "credit_card"
              ]
            },
            "month": {
              "type": "integer"
            },
            "year": {
              "type": "integer"
            },
            "last_four_digits": {
              "type": "string"
            },
            "brand": {
              "enum": [
                "visa",
                "american_express",
                "master",
                "jcb"
              ]
            },
            "expiry_days": {
              "$ref": "#/definitions/payments/definitions/expiry_days"
            }
          },
          "required": [
            "type",
            "brand",
            "last_four_digits",
            "month",
            "year"
          ]
        },
        "id": {
          "example": "94f128d4021b049bc616f5b1b0",
          "readOnly": true,
          "type": "string",
          "description": "A unique indentifier for the payment."
        },
        "resource": {
          "example": "payment",
          "enum": [
            "payment"
          ],
          "description": "Value of `resource`."
        },
        "status": {
          "example": "pending",
          "enum": [
            "pending",
            "authorized",
            "captured",
            "expired",
            "cancelled",
            "refunded"
          ],
          "description": "The status of the payment."
        },
        "amount": {
          "example": "300",
          "maximum": 9999999,
          "minimum": 0,
          "type": "number",
          "description": "The amount to be charged before tax. Must be equal or greater than 0. Use a ‘.’ as a decimal separator, and no thousands separator."
        },
        "tax": {
          "example": "30",
          "type": [
            "number",
            "string",
            "null"
          ],
          "description": "The amount of tax to be charged. Defaults to the highest consumption tax rate in Japan if omitted or set to 'auto'. Use a ‘.’ as a decimal separator, and no thousands separator. If the tax is more precise than the currency allows, it will be rounded using a round half up algorithm."
        },
        "payment_deadline": {
          "format": "date-time",
          "example": "2015-03-09T06:52:34Z",
          "type": [
            "string",
            "null"
          ],
          "description": "Time when the payment will expire. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
        },
        "payment_method_fee": {
          "example": "0",
          "type": [
            "number"
          ],
          "minimum": 0,
          "description": "An additional fee added to specific payment types."
        },
        "total": {
          "example": "330",
          "type": [
            "number"
          ],
          "description": "The payment total, this is the amount + tax + payment_method_fee."
        },
        "currency": {
          "example": "JPY",
          "enum": [
            "JPY",
            "USD",
            "EUR",
            "TWD",
            "KRW"
          ],
          "description": "3 letter ISO currency code used to pay."
        },
        "description": {
          "example": "",
          "type": [
            "string",
            "null"
          ],
          "description": "Plaintext description for annotating a resource."
        },
        "subscription": {
          "example": null,
          "type": [
            "object",
            "null"
          ],
          "description": "Shown if payment was part of a subscription."
        },
        "captured_at": {
          "example": "2015-03-09T06:52:34Z",
          "type": [
            "string",
            "null"
          ],
          "description": "An ISO 8601 formatted timestamp of when a payment was captured."
        },
        "metadata": {
          "type": [
            "object",
            "null"
          ],
          "example": {
            "order_id": "abcdefghijklmn"
          },
          "description": "A set of key-value pairs."
        },
        "payment_details_request": {
          "description": "A hash or token describing the payment method used to make the payment. This or `customer` must be present when creating a payment.",
          "example": {
            "type": [
              "konbini"
            ],
            "store": "lawson",
            "email": "foo@bar.com",
            "phone": "08011111111"
          },
          "type": [
            "string",
            "object"
          ],
          "properties": {
            "type": {
              "enum": [
                "credit_card",
                "bank_transfer",
                "konbini",
                "pay_easy",
                "web_money",
                "bit_cash",
                "nanaco",
                "net_cash",
                "culture_voucher",
                "dospara",
                "mobile",
                "zgold",
                "cvs",
                "steam_prepaid_card",
                "happy_money",
                "toss"
              ]
            },
            "email": {
              "$ref": "#/definitions/payments/definitions/email"
            }
          },
          "required": [
            "type"
          ]
        },
        "payment_details_response": {
          "description": "A hash or token describing the payment method used to make the payment.",
          "example": {
            "type": [
              "konbini"
            ],
            "store": "lawson",
            "confirmation_code": null,
            "receipt": "12345"
          },
          "oneOf": [
            {
              "type": [
                "null"
              ]
            },
            {
              "$ref": "#/definitions/payments/definitions/bank_transfer_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/credit_card_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/konbini_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/pay_easy_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/web_money_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/steam_prepaid_card_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/bit_cash_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/nanaco_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/culture_voucher_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/mobile_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/toss_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/zgold_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/net_cash_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/cvs_korea_response"
            },
            {
              "$ref": "#/definitions/payments/definitions/happy_money_response"
            }
          ]
        },
        "fraud_details": {
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "customer_ip": {
              "type": [
                "string"
              ],
              "oneOf": [
                {
                  "format": "ipv4"
                },
                {
                  "format": "ipv6"
                }
              ]
            },
            "customer_email": {
              "format": "email",
              "type": [
                "string"
              ]
            },
            "customer_id": {
              "type": [
                "string"
              ]
            },
            "browser_language": {
              "type": [
                "string"
              ]
            },
            "browser_user_agent": {
              "type": [
                "string"
              ]
            }
          },
          "dependencies": {
            "customer_email": [
              "customer_ip"
            ],
            "browser_language": [
              "customer_ip"
            ],
            "browser_user_agent": [
              "customer_ip"
            ]
          },
          "additionalProperties": false
        },
        "created_at": {
          "example": "2015-03-06T06:52:35Z",
          "format": "date-time",
          "type": [
            "string"
          ],
          "description": "An ISO 8601 formatted timestamp of when a payment was created."
        }
      },
      "links": [
        {
          "title": "List",
          "description": "Retrieves a paginated list of payments. Pagination can be configured with `page` and `per_page` parameters.\n\nPayments can be filtered by `currency`, `external_order_num`, and `status`.\n\nA time range can be specified with `start_time`, and `end_time`.",
          "href": "/payments",
          "method": "GET",
          "rel": "instances",
          "response_example": "payments#index",
          "targetSchema": {
            "$ref": "#/definitions/list"
          },
          "schema": {
            "$ref": "#/definitions/payment_list_filter"
          }
        },
        {
          "title": "Show",
          "description": "Retrieves a single payment object by its `id`.",
          "href": "/payments/{(%2Fdefinitions%2Fpayments%2Fdefinitions%2Fid)}",
          "method": "GET",
          "rel": "self",
          "response_example": "payments#show",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          }
        },
        {
          "title": "Create",
          "description": "Creates a payment for a given `amount` and `currency`.\n\n*Must specify exactly one of `payment_details` or `customer`.",
          "href": "/payments",
          "method": "POST",
          "rel": "create",
          "response_example": "payments#create",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/payments/definitions/amount"
              },
              "capture": {
                "$ref": "#/definitions/payments/definitions/capture"
              },
              "description": {
                "$ref": "#/definitions/payments/definitions/description"
              },
              "tax": {
                "$ref": "#/definitions/payments/definitions/tax"
              },
              "currency": {
                "$ref": "#/definitions/payments/definitions/currency"
              },
              "external_order_num": {
                "$ref": "#/definitions/payments/definitions/external_order_num"
              },
              "return_url": {
                "$ref": "#/definitions/payments/definitions/return_url"
              },
              "cancel_url": {
                "$ref": "#/definitions/payments/definitions/cancel_url"
              },
              "locale": {
                "$ref": "#/definitions/payments/definitions/locale"
              },
              "partner_origin": {
                "$ref": "#/definitions/payments/definitions/partner_origin"
              },
              "metadata": {
                "$ref": "#/definitions/payments/definitions/metadata"
              },
              "payment_details": {
                "$ref": "#/definitions/payments/definitions/payment_details_request"
              },
              "customer": {
                "$ref": "#/definitions/payments/definitions/customer"
              },
              "fraud_details": {
                "$ref": "#/definitions/payments/definitions/fraud_details"
              }
            },
            "required": [
              "amount",
              "currency"
            ],
            "special": [
              "payment_details",
              "customer"
            ],
            "additionalProperties": false
          }
        },
        {
          "title": "Update",
          "description": "Updates a payment. Only a payment's `description` and `metadata` can be changed.",
          "href": "/payments/{(%2Fdefinitions%2Fpayments%2Fdefinitions%2Fid)}",
          "method": "PATCH",
          "rel": "self",
          "response_example": "payments#update",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "description": {
                "$ref": "#/definitions/payments/definitions/description"
              },
              "metadata": {
                "$ref": "#/definitions/payments/definitions/metadata"
              },
              "payment_details": {
                "type": [
                  "string",
                  "object"
                ],
                "properties": {
                  "type": {
                    "enum": [
                      "web_money",
                      "net_cash",
                      "nanaco",
                      "steam_prepaid_card"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        {
          "title": "Capture",
          "description": "Captures a payment. Only works on payments with a `payment_type` of `\"credit_card\"`.",
          "href": "/payments/{(%2Fdefinitions%2Fpayments%2Fdefinitions%2Fid)}/capture",
          "method": "POST",
          "rel": "self",
          "response_example": "payments#capture",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          }
        },
        {
          "title": "Refund",
          "description": "Refunds an arbitrary amount of money from an existing payment. If no `amount` is specified, the whole payment is refunded.",
          "href": "/payments/{(%2Fdefinitions%2Fpayments%2Fdefinitions%2Fid)}/refund",
          "method": "POST",
          "rel": "self",
          "response_example": "payments#refund",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/payments/definitions/amount"
              },
              "description": {
                "$ref": "#/definitions/payments/definitions/description"
              }
            }
          }
        },
        {
          "title": "Cancel",
          "description": "Cancels a payment. The given payment must have a `state` of `pending` or `authorized` in order to be canceled.",
          "href": "/payments/{(%2Fdefinitions%2Fpayments%2Fdefinitions%2Fid)}/cancel",
          "method": "POST",
          "rel": "self",
          "response_example": "payments#cancel",
          "targetSchema": {
            "$ref": "#/definitions/payments"
          }
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/payments/definitions/id"
        },
        "resource": {
          "$ref": "#/definitions/payments/definitions/resource"
        },
        "status": {
          "$ref": "#/definitions/payments/definitions/status"
        },
        "amount": {
          "$ref": "#/definitions/payments/definitions/amount"
        },
        "return_url": {
          "$ref": "#/definitions/payments/definitions/return_url"
        },
        "cancel_url": {
          "$ref": "#/definitions/payments/definitions/cancel_url"
        },
        "tax": {
          "$ref": "#/definitions/payments/definitions/tax"
        },
        "payment_deadline": {
          "$ref": "#/definitions/payments/definitions/payment_deadline"
        },
        "payment_details": {
          "$ref": "#/definitions/payments/definitions/payment_details_response"
        },
        "payment_method_fee": {
          "$ref": "#/definitions/payments/definitions/payment_method_fee"
        },
        "total": {
          "$ref": "#/definitions/payments/definitions/total"
        },
        "currency": {
          "$ref": "#/definitions/payments/definitions/currency"
        },
        "description": {
          "$ref": "#/definitions/payments/definitions/description"
        },
        "subscription": {
          "$ref": "#/definitions/payments/definitions/subscription"
        },
        "captured_at": {
          "$ref": "#/definitions/payments/definitions/captured_at"
        },
        "metadata": {
          "$ref": "#/definitions/payments/definitions/metadata"
        },
        "created_at": {
          "$ref": "#/definitions/payments/definitions/created_at"
        },
        "refunds": {
          "type": [
            "array"
          ]
        }
      },
      "description": "A Payment resource represents a single transaction from a customer.",
      "title": "Payments"
    },
    "subscriptions": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "example": "fa888fca14be29d3fae455f22d",
          "readOnly": true,
          "type": [
            "string"
          ],
          "description": "A unique identifier for a subscription."
        },
        "period": {
          "example": "JPY",
          "enum": [
            "weekly",
            "monthly",
            "yearly"
          ],
          "description": "Interval for subscription payments: `weekly`, `monthly`, or `yearly`"
        }
      },
      "links": [
        {
          "title": "Create",
          "description": "Create a new subscription. A subscription represents a recurring payment. Recurring payments may be on a `weekly`, `monthly`, or `yearly` basis, specified by the `period` parameter.\n\nIn order to create a subscription, a customer ID must be supplied. The customer object contains saved payment info, which is regularly charged by the subscription.\n\nA subscription can't be modified once it's created. To change a subscription, you must delete it and create a new one.",
          "href": "/subscriptions",
          "method": "POST",
          "rel": "create",
          "response_example": "subscriptions#create",
          "targetSchema": {
            "$ref": "#/definitions/subscriptions"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "customer": {
                "$ref": "#/definitions/payments/definitions/customer"
              },
              "amount": {
                "$ref": "#/definitions/payments/definitions/amount"
              },
              "currency": {
                "$ref": "#/definitions/payments/definitions/currency"
              },
              "period": {
                "$ref": "#/definitions/subscriptions/definitions/period"
              },
              "metadata": {
                "$ref": "#/definitions/payments/definitions/metadata"
              }
            },
            "required": [
              "customer",
              "amount",
              "currency",
              "period"
            ],
            "additionalFields": false
          }
        },
        {
          "title": "List",
          "description": "List existing subscriptions. Paginates with the usual `page`, `per_page`, `start_time`, and `end_time` parameters.",
          "href": "/subscriptions",
          "method": "GET",
          "rel": "instances",
          "response_example": "subscriptions#index",
          "targetSchema": {
            "$ref": "#/definitions/list"
          },
          "schema": {
            "$ref": "#/definitions/list_filter"
          }
        },
        {
          "title": "Show",
          "description": "Show an existing subscription, including its customer and scrubbed payment details.",
          "href": "/subscriptions/{(%2Fdefinitions%2Fsubscriptions%2Fdefinitions%2Fid)}",
          "method": "GET",
          "rel": "self",
          "response_example": "subscriptions#show",
          "targetSchema": {
            "$ref": "#/definitions/subscriptions"
          }
        },
        {
          "title": "Destroy",
          "description": "Delete a subscription. Once deleted, the subscription's regular payments will stop.",
          "href": "/subscriptions/{(%2Fdefinitions%2Fsubscriptions%2Fdefinitions%2Fid)}",
          "method": "DELETE",
          "rel": "destroy",
          "response_example": "subscriptions#destroy",
          "targetSchema": {
            "$ref": "#/definitions/subscriptions"
          }
        }
      ],
      "properties": {
        "customer": {
          "$ref": "#/definitions/payments/definitions/customer"
        },
        "amount": {
          "$ref": "#/definitions/payments/definitions/amount"
        },
        "currency": {
          "$ref": "#/definitions/payments/definitions/currency"
        },
        "period": {
          "$ref": "#/definitions/subscriptions/definitions/period"
        }
      },
      "description": "Subscription Resource",
      "title": "Subscriptions"
    },
    "customers": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "example": "fa799fca14be29d3fae455f22d",
          "readOnly": true,
          "type": [
            "string"
          ],
          "description": "A unique identifier for the customer."
        },
        "resource": {
          "example": "customer",
          "readOnly": true,
          "enum": [
            "customer"
          ],
          "description": "Name of resource"
        },
        "payment_details": {
          "$ref": "#/definitions/payments/definitions/payment_details_response"
        },
        "metadata": {
          "$ref": "#/definitions/payments/definitions/metadata"
        },
        "email": {
          "type": [
            "string",
            "null"
          ],
          "format": "email",
          "maxLength": 255,
          "description": "Customer's email address."
        },
        "created_at": {
          "example": "2015-03-06T06:52:35Z",
          "format": "date-time",
          "readOnly": true,
          "type": [
            "string"
          ],
          "description": "An ISO 8601 formatted timestamp of when the customer was created."
        }
      },
      "links": [
        {
          "title": "List",
          "description": "Retrieves a paginated list of all previously-registered customers. Does not reveal saved payment details.",
          "href": "/customers",
          "method": "GET",
          "rel": "instances",
          "response_example": "customers#index",
          "targetSchema": {
            "$ref": "#/definitions/list"
          },
          "schema": {
            "$ref": "#/definitions/list_filter"
          }
        },
        {
          "title": "Show",
          "description": "Retrieves customer personal information. This endpoint does not reveal the saved payment details.",
          "href": "/customers/{(%2Fdefinitions%2Fcustomers%2Fdefinitions%2Fid)}",
          "method": "GET",
          "rel": "self",
          "response_example": "customers#show",
          "targetSchema": {
            "$ref": "#/definitions/customers"
          }
        },
        {
          "title": "Create",
          "description": "Creates a new customer with the specified `payment_details`. Customer payment details are stored in a secure, PCI DSS-compliant way.\n\nOnce you have a customer, you may specify the customer's `id` instead of `payment_details` when creating a payment.",
          "href": "/customers",
          "method": "POST",
          "rel": "create",
          "response_example": "customers#create",
          "targetSchema": {
            "$ref": "#/definitions/customers"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "currency": {
                "$ref": "#/definitions/payments/definitions/currency"
              },
              "payment_details": {
                "$ref": "#/definitions/payments/definitions/payment_details_request"
              },
              "email": {
                "$ref": "#/definitions/customers/definitions/email"
              },
              "metadata": {
                "$ref": "#/definitions/customers/definitions/metadata"
              }
            },
            "required": [
              "payment_details"
            ],
            "additionalFields": false
          }
        },
        {
          "title": "Update",
          "description": "Updates the customer with the given `id`. A new set of `payment_details` may be specified.",
          "href": "/customers/{(%2Fdefinitions%2Fcustomers%2Fdefinitions%2Fid)}",
          "method": "PATCH",
          "rel": "self",
          "response_example": "customers#update",
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "currency": {
                "$ref": "#/definitions/payments/definitions/currency"
              },
              "payment_details": {
                "$ref": "#/definitions/payments/definitions/payment_details_request"
              },
              "email": {
                "$ref": "#/definitions/customers/definitions/email"
              },
              "metadata": {
                "$ref": "#/definitions/customers/definitions/metadata"
              }
            },
            "additionalFields": false
          },
          "targetSchema": {
            "$ref": "#/definitions/customers"
          }
        },
        {
          "title": "Destroy",
          "description": "Deletes the customer with the given `id`. This completely erases the stored payment details from our database.",
          "href": "/customers/{(%2Fdefinitions%2Fcustomers%2Fdefinitions%2Fid)}",
          "method": "DELETE",
          "rel": "destroy",
          "response_example": "customers#destroy",
          "targetSchema": {
            "$ref": "#/definitions/customers"
          }
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/customers/definitions/id"
        },
        "resource": {
          "$ref": "#/definitions/customers/definitions/resource"
        },
        "email": {
          "$ref": "#/definitions/customers/definitions/email"
        },
        "metadata": {
          "$ref": "#/definitions/customers/definitions/metadata"
        },
        "created_at": {
          "$ref": "#/definitions/customers/definitions/created_at"
        }
      },
      "description": "A Customer resource provides a way to store customer payment information for future transactions.",
      "title": "Customers"
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "example": "tok_ed4119a0f69bc365286d5a9a8777f33cee024f19d532454e6abffccc42cf1452b6ad214de6b8e876cabc60ae6f",
          "readOnly": true,
          "type": [
            "string"
          ],
          "description": "A unique identifier for the token."
        },
        "resource": {
          "example": "token",
          "enum": [
            "token"
          ],
          "description": "Name of resource"
        },
        "payment_details": {
          "type": [
            "object"
          ],
          "description": "A hash or token describing the payment method."
        },
        "created_at": {
          "example": "2015-03-06T06:52:35Z",
          "format": "date-time",
          "type": [
            "string"
          ],
          "description": "An ISO 8601 formatted timestamp of when the token was created."
        }
      },
      "links": [
        {
          "title": "Create",
          "description": "Creates a token with the given `payment_details`.\n\nIt is recommended to have a client application make this request directly so that sensitive payment information (e.g. credit card number) doesn't hit your server. Receiving credit card numbers requires your business to be PCI-DSS compliant. Once you turn your customer's details into a token, the token string can safely be sent to your server and used as `payment_details` to a future KOMOJU API request.\n\nA `currency` may be optionally specified. When `currency` is provided, KOMOJU will ensure that the payment made using the new token is in the same currency.\n\nTokens can't be indexed or deleted via API. Tokens are instead deleted on use, and expire when unused.",
          "href": "/tokens",
          "method": "POST",
          "rel": "create",
          "response_example": "tokens#create",
          "targetSchema": {
            "$ref": "#/definitions/list"
          },
          "schema": {
            "type": [
              "object"
            ],
            "properties": {
              "currency": {
                "$ref": "#/definitions/payments/definitions/currency"
              },
              "payment_details": {
                "$ref": "#/definitions/payments/definitions/payment_details_request"
              }
            },
            "required": [
              "payment_details"
            ],
            "additionalFields": false
          }
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/tokens/definitions/id"
        },
        "payment_details": {
          "$ref": "#/definitions/tokens/definitions/payment_details"
        },
        "resource": {
          "$ref": "#/definitions/tokens/definitions/resource"
        },
        "created_at": {
          "$ref": "#/definitions/tokens/definitions/created_at"
        }
      },
      "description": "A Token resource represents a saved set of payment details that can be used to fund a Payment.",
      "title": "Tokens"
    }
  },
  "properties": {
    "events": {
      "$ref": "#/definitions/events"
    },
    "payments": {
      "$ref": "#/definitions/payments"
    },
    "subscriptions": {
      "$ref": "#/definitions/subscriptions"
    },
    "customers": {
      "$ref": "#/definitions/customers"
    },
    "tokens": {
      "$ref": "#/definitions/tokens"
    }
  },
  "type": [
    "object"
  ],
  "id": "komoju",
  "links": [
    {
      "href": "https://komoju.com/api/v1",
      "rel": "self"
    }
  ],
  "description": "Komoju API auto-generated JSON Schema",
  "title": "Komoju API"
}
